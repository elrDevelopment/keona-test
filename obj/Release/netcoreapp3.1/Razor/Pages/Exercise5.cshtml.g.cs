#pragma checksum "C:\Users\elrde\Documents\projects\test-deleteme\WebApplication\WebApplication\Pages\Exercise5.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "abab2707140d542a7ef8a39da95d2537884a5d4d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(WebApplication.Pages.Pages_Exercise5), @"mvc.1.0.razor-page", @"/Pages/Exercise5.cshtml")]
namespace WebApplication.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\elrde\Documents\projects\test-deleteme\WebApplication\WebApplication\Pages\_ViewImports.cshtml"
using WebApplication;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute("RouteTemplate", "/Exercise5")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"abab2707140d542a7ef8a39da95d2537884a5d4d", @"/Pages/Exercise5.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f9173452e213feb50bb0addca674477e742c9787", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Exercise5 : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n\r\n");
#nullable restore
#line 5 "C:\Users\elrde\Documents\projects\test-deleteme\WebApplication\WebApplication\Pages\Exercise5.cshtml"
  
    ViewData["Title"] = "Keona - Exercise 5";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""grid grid-cols-2 mb-20"">
<div id=""comments"" class="" max-w-7xl mx-auto col-span-2 bg-white overflow-hidden shadow rounded-lg mt-20"">
  <div class=""px-4 py-5 sm:p-6"">
    <h2 class=""text-2xl text-blue-800"">
          Exercise 5 - Technology and Tools
        </h2>
        <h3 class=""text-gray-700"">
         Discuss the technology and tools for a new project.
        </h3>
  </div>
</div>


<div id=""solution"" class=""col-span-2 bg-white overflow-hidden shadow rounded-lg mt-10 max-w-5xl mx-auto"">
  <div class=""px-4 py-5 sm:p-6"">
    <h2 class=""text-2xl text-blue-800 text-center"">
            Answer
    </h2>
    <div class=""mt-2"">
        <div class=""max-w-screen-xl mx-auto py-6 px-4 sm:px-6 lg:py-6 lg:px-8"">
          <div class=""mt-6 border-t-2 border-gray-200 pt-6"">
            <dl>
              <div class=""md:grid md:grid-cols-12 md:gap-8"">
                <dt class=""text-base leading-6 font-medium text-gray-900 md:col-span-5"">
                  Client Side
             ");
            WriteLiteral(@"   </dt>
                <dd class=""mt-2 md:mt-0 md:col-span-7"">
                  <p class=""text-base leading-6 text-gray-500"">
                    Depending on the project. I normally use an Angular frontend. I don't really have a specific reason here. It is just something that I started using and have grown to like it.
                    I have used React and Vue in proof of concepts, but always seem to go back to Angular.
                  </p>
                </dd>
              </div>
              <div class=""mt-8 border-t border-gray-200 pt-6 md:grid md:grid-cols-12 md:gap-8"">
                <dt class=""text-base leading-6 font-medium text-gray-900 md:col-span-5"">
                  API
                </dt>
                <dd class=""mt-2 md:mt-0 md:col-span-7"">
                  <ul class=""text-base leading-6 text-gray-500"">
                    <li>.Net Core Web Api</li>
                    <li>Entity Framework ORM</li>
                    <li>Fluent Validation</li>
                ");
            WriteLiteral(@"    <li>Auto Mapper for object to DTO mapping</li>
                  </ul>
                </dd>
              </div>
              <div class=""mt-8 border-t border-gray-200 pt-6 md:grid md:grid-cols-12 md:gap-8"">
                <dt class=""text-base leading-6 font-medium text-gray-900 md:col-span-5"">
                  Database
                </dt>
                <dd class=""mt-2 md:mt-0 md:col-span-7"">
                  <p class=""text-base leading-6 text-gray-500"">
                    There are various use cases on when to use Relational Db vs. NoSql. However, with the newer relational dbs ability to render JSON, and store NVARCHAR(MAX) for SQL SERVER and JSON type for POSTGRESQL. It makes
                    a ton of sense to just stick with the tried and true models.
                    SQL is well supported in Azure and AWS RDS so coverage is good and well documented in cloud providers
                  </p>
                </dd>
              </div>
           <div class=""mt-8 border-t b");
            WriteLiteral(@"order-gray-200 pt-6 md:grid md:grid-cols-12 md:gap-8"">
             <dt class=""text-base leading-6 font-medium text-gray-900 md:col-span-5"">
               API Gateway
             </dt>
             <dd class=""mt-2 md:mt-0 md:col-span-7"">
               <p class=""text-base leading-6 text-gray-500"">
                 This tool makes it really easy to switch environments, update code, and load balance.
               </p>
             </dd>
           </div>
          <div class=""mt-8 border-t border-gray-200 pt-6 md:grid md:grid-cols-12 md:gap-8"">
           <dt class=""text-base leading-6 font-medium text-gray-900 md:col-span-5"">
             DevOps
           </dt>
           <dd class=""mt-2 md:mt-0 md:col-span-7"">
             <p class=""text-base leading-6 text-gray-500"">
             I would most like use Azure DevOps pipelines for all CI/CD/AT. It integrates well with on prem, and cloud providers to deploy solutions as need to multiple tenants.
             </p>
           </dd>
        ");
            WriteLiteral(" </div>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n</div>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<WebApplication.Pages.Exercise5> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<WebApplication.Pages.Exercise5> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<WebApplication.Pages.Exercise5>)PageContext?.ViewData;
        public WebApplication.Pages.Exercise5 Model => ViewData.Model;
    }
}
#pragma warning restore 1591
