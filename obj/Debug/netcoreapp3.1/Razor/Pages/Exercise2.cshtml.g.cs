#pragma checksum "C:\Users\elrde\Documents\projects\test-deleteme\WebApplication\WebApplication\Pages\Exercise2.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "aaacc85e984b8a06c365cb9c0c6ddc63a9378bd6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(WebApplication.Pages.Pages_Exercise2), @"mvc.1.0.razor-page", @"/Pages/Exercise2.cshtml")]
namespace WebApplication.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\elrde\Documents\projects\test-deleteme\WebApplication\WebApplication\Pages\_ViewImports.cshtml"
using WebApplication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\elrde\Documents\projects\test-deleteme\WebApplication\WebApplication\Pages\Exercise2.cshtml"
using WebApplication.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute("RouteTemplate", "/Exercise2")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aaacc85e984b8a06c365cb9c0c6ddc63a9378bd6", @"/Pages/Exercise2.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f9173452e213feb50bb0addca674477e742c9787", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Exercise2 : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 5 "C:\Users\elrde\Documents\projects\test-deleteme\WebApplication\WebApplication\Pages\Exercise2.cshtml"
  
    ViewData["Title"] = "Keona Health- Exercise 2";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""grid grid-cols-2 mb-20 px-4 md:px-0"">
<div id=""comments"" class="" max-w-7xl mx-auto col-span-2 bg-white overflow-hidden shadow rounded-lg mt-20"">
  <div class=""px-4 py-5 sm:p-6"">
    <h2 class=""text-2xl text-blue-800"">
          Exercise 2 - High Availability Upgrades
        </h2>
        <h3 class=""text-gray-700"">
          I didn't see any configuration requirements. Assuming Cloud Architecture.
        </h3>
  </div>
</div>


<div id=""solution"" class="" mx-0 md:mx-5 col-span-2 md:col-span-1 bg-white overflow-hidden shadow rounded-lg mt-10"">
  <div class=""px-4 py-5 sm:p-6"">
    <h2 class=""text-2xl text-blue-800"">
            Answer
    </h2>
    <div class=""mt-2"">
        <div class=""max-w-screen-xl mx-auto py-6 px-4 sm:px-6 lg:py-6 lg:px-8"">
          <div class=""mt-6 border-t-2 border-gray-200 pt-6"">
            <dl>
              <div class=""md:grid md:grid-cols-12 md:gap-8"">
                <dt class=""text-base leading-6 font-medium text-gray-900 md:col-span-5"">
    ");
            WriteLiteral(@"              Continuous Development / Continuous Integration / Automated Tests?
                </dt>
                <dd class=""mt-2 md:mt-0 md:col-span-7"">
                  <p class=""text-base leading-6 text-gray-500"">
                    Using a Dev Ops platform, I would ensure that there are pipelines in place for CI/CD/AT. One would need to ensure that the code they are upgrading is in working condition.
                    Continuous testing via build and integration pipelines is a trusted way to do this. <br></br>
                    During the development cycle this would constantly be building the application and releasing to the development environment. 
                    From a quality perspective this increases the developments team confidence in pushing code to production environments
                  </p>
                </dd>
              </div>
              <div class=""mt-8 border-t border-gray-200 pt-6 md:grid md:grid-cols-12 md:gap-8"">
                <dt class=""text-base ");
            WriteLiteral(@"leading-6 font-medium text-gray-900 md:col-span-5"">
                  API Gateway
                </dt>
                <dd class=""mt-2 md:mt-0 md:col-span-7"">
                  <p class=""text-base leading-6 text-gray-500"">
                    The other tool or mechanism that makes the upgrade process fairly easy is some version of an API Gateway. This tool or service allows one point of entry to an environment.
                    It may be coupled with a load balancing mechanism as well to control and adjust traffic as needed. However, it comes in handy when doing updates and upgrades to the system.
                    The idea is you point the public facing api traffic to a web or micro service.

                  </p>
                </dd>
              </div>
              <div class=""mt-8 border-t border-gray-200 pt-6 md:grid md:grid-cols-12 md:gap-8"">
                <dt class=""text-base leading-6 font-medium text-gray-900 md:col-span-5"">
                  Updating the system
           ");
            WriteLiteral(@"     </dt>
                <dd class=""mt-2 md:mt-0 md:col-span-7"">
                  <p class=""text-base leading-6 text-gray-500"">
                    To update this type of system (see diagram), we would ensure the API gateway is pointed at the correct server. For the server or system that is offline (Prod B). Push the code to the web service or database via a build release pipeline.
                    Using the API Gateway switch the system to the alternate production environment that was just updated. 
                    <br></br>
                    The system is now running with updated code on the redundant system. We would now need to update the Primary Server or Prod A
                    alternate release pipeline. 
                    One could swith back the API Gateway to the Prod A system if maintenance and system config required. Technically there should be any downtime in this scenario.
                  </p>
                </dd>
              </div>
           
            </dl");
            WriteLiteral(@">
          </div>
        </div>
      </div>

  </div>
</div>

<div id=""output"" class=""col-span-2 md:col-span-1 mx-0 md:mx-5 bg-white overflow-hidden shadow rounded-lg mt-10"">
  <div class=""px-4 py-5 sm:p-6"">
    <h2 class=""text-2xl text-blue-800"">
        Output
    </h2>
   
  <div class=""flex justify-center mt-5"">
        <iframe src=""https://netorgft4560686-my.sharepoint.com/personal/erick_r10dev_com/_layouts/15/Doc.aspx?sourcedoc={bb27efff-4fba-4e90-a49a-31c2242b8c60}&amp;action=embedview"" 
                  width=""800px"" height=""627px"" frameborder=""0"">This is an embedded <a target=""_blank"" href=""https://office.com"">Microsoft Office</a> diagram, powered by <a target=""_blank"" href=""https://office.com/webapps"">Office</a>.</iframe>
    </div>
  </div>
</div>


</div>




<script>
document.addEventListener('DOMContentLoaded', (event) => {
  document.querySelectorAll('pre code').forEach((block) => {
    hljs.highlightBlock(block);
  });
});


</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<WebApplication.Pages.Exercise2> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<WebApplication.Pages.Exercise2> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<WebApplication.Pages.Exercise2>)PageContext?.ViewData;
        public WebApplication.Pages.Exercise2 Model => ViewData.Model;
    }
}
#pragma warning restore 1591
